import asyncio
import logging
import sqlite3
import os
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–º–æ–¥—É–ª—å
from admin_panel import setup_admin_handlers, admin_menu

API_TOKEN = "8302199284:AAHLD2P9hZZ9swbIgVE9qqlqbILz-417hZ8"
ADMIN_ID = (785219206, 891991569)  # –ö–æ—Ä—Ç–µ–∂ —Å –¥–≤—É–º—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–æ—Ä—Ç–µ–∂–∞ ADMIN_ID
setup_admin_handlers(dp, ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs("Photo1", exist_ok=True)
os.makedirs("Photo2", exist_ok=True)

conn = sqlite3.connect("Bookings.db")
cursor = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
cursor.execute("PRAGMA table_info(classes)")
columns = [col[1] for col in cursor.fetchall()]
if "capacity" not in columns:
    try:
        cursor.execute("ALTER TABLE classes ADD COLUMN capacity INTEGER DEFAULT 1")
    except Exception:
        pass
if "class_type" not in columns:
    try:
        cursor.execute("ALTER TABLE classes ADD COLUMN class_type TEXT DEFAULT '–û–±—ã—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'")
    except Exception:
        pass

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É photo_path –≤ —Ç–∞–±–ª–∏—Ü—É content –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("PRAGMA table_info(content)")
content_columns = [col[1] for col in cursor.fetchall()]
if "photo_path" not in content_columns:
    try:
        cursor.execute("ALTER TABLE content ADD COLUMN photo_path TEXT")
    except Exception:
        pass

conn.commit()

# –í —Ä–∞–∑–¥–µ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ–±–∞–≤—å—Ç–µ:
cursor.execute("""CREATE TABLE IF NOT EXISTS content (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    photo_path TEXT
                )""")

# –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute(
    "INSERT OR IGNORE INTO content (key, value, photo_path) VALUES ('about_classes', 'üßò –£ –Ω–∞—Å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ä–∞—Å—Ç—è–∂–∫–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è.', NULL)")
cursor.execute(
    "INSERT OR IGNORE INTO content (key, value, photo_path) VALUES ('announcement', 'üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.', NULL)")
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute("""CREATE TABLE IF NOT EXISTS bookings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    date TEXT,
                    time TEXT
                )""")
cursor.execute("""CREATE TABLE IF NOT EXISTS classes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    date TEXT,
                    time TEXT,
                    capacity INTEGER DEFAULT 1,
                    class_type TEXT DEFAULT '–û–±—ã—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
                )""")
conn.commit()

last_message = {}


# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
def format_date_display(db_date):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ë–î (YYYY-MM-DD) –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (DD.MM.YYYY)"""
    try:
        if db_date:
            date_obj = datetime.strptime(db_date, "%Y-%m-%d")
            return date_obj.strftime("%d.%m.%Y")
        return db_date
    except ValueError:
        return db_date


def format_date_storage(display_date):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (DD.MM.YYYY) –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î (YYYY-MM-DD)"""
    try:
        if display_date:
            date_obj = datetime.strptime(display_date, "%d.%m.%Y")
            return date_obj.strftime("%Y-%m-%d")
        return display_date
    except ValueError:
        return display_date


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def notify_admin(message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMIN_ID:
        try:
            await bot.send_message(admin_id, message_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_previous_user_message(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in last_message:
        chat_id, message_id = last_message[user_id]
        try:
            await bot.delete_message(chat_id, message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        last_message.pop(user_id, None)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ
def get_about_classes_data():
    cursor.execute("SELECT value, photo_path FROM content WHERE key = 'about_classes'")
    result = cursor.fetchone()
    if result:
        text, photo_filename = result
        if photo_filename:
            photo_path = os.path.join("Photo1", photo_filename)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(photo_path):
                return text, photo_path
            else:
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        return text, None
    return "üßò –£ –Ω–∞—Å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ä–∞—Å—Ç—è–∂–∫–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è.", None


def get_announcement_data():
    cursor.execute("SELECT value, photo_path FROM content WHERE key = 'announcement'")
    result = cursor.fetchone()
    if result:
        text, photo_filename = result
        if photo_filename:
            photo_path = os.path.join("Photo2", photo_filename)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(photo_path):
                return text, photo_path
            else:
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        return text, None
    return "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", None


async def handle_text_response(callback: CallbackQuery, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        msg = await callback.message.edit_text(text, reply_markup=main_menu())
        last_message[callback.from_user.id] = (msg.chat.id, msg.message_id)
    except Exception:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await callback.message.answer(text, reply_markup=main_menu())
        last_message[callback.from_user.id] = (msg.chat.id, msg.message_id)


async def send_or_edit_single(user_id: int, chat_id: int, text: str, reply_markup: InlineKeyboardMarkup | None = None):
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ '–≥–ª–∞–≤–Ω–æ–µ' —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ last_message.
    """
    if user_id in last_message:
        old_chat_id, old_message_id = last_message[user_id]
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await bot.edit_message_text(text, chat_id=old_chat_id, message_id=old_message_id,
                                              reply_markup=reply_markup, parse_mode="HTML")
            last_message[user_id] = (msg.chat.id, msg.message_id)
            return
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await bot.delete_message(old_chat_id, old_message_id)
            except Exception:
                pass
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            last_message.pop(user_id, None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode="HTML")
    last_message[user_id] = (msg.chat.id, msg.message_id)


def main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="book_class"),
            InlineKeyboardButton(text="üßò –û –∑–∞–Ω—è—Ç–∏—è—Ö", callback_data="about_classes")
        ],
        [
            InlineKeyboardButton(text="üìñ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è", callback_data="my_bookings"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏", callback_data="cancel_booking")
        ],
        [
            InlineKeyboardButton(text="üì¢ –ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="announcement"),
            InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ]
    ])
    return keyboard


def cancel_keyboard(user_id: int):
    cursor.execute("SELECT id, date, time FROM bookings WHERE user_id=?", (user_id,))
    rows = cursor.fetchall()
    buttons = []
    for r in rows:
        display_date = format_date_display(r[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        btn = InlineKeyboardButton(
            text=f"{display_date} {r[2]}", callback_data=f"cancel:{r[0]}"
        )
        buttons.append([btn])
    if not buttons:
        buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", callback_data="no_booking")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_user_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def available_classes_keyboard():
    cursor.execute("""
        SELECT DISTINCT date FROM classes
        ORDER BY date
    """)
    rows = cursor.fetchall()
    if not rows:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π", callback_data="no_classes")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_user_menu")]
        ])
        return kb

    buttons = []
    for row in rows:
        display_date = format_date_display(row[0])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
        buttons.append(InlineKeyboardButton(
            text=display_date,
            callback_data=f"date:{row[0]}"  # –í callback_data –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        ))

    inline_keyboard = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_user_menu")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def available_times_keyboard(selected_date: str):
    cursor.execute("""
        SELECT c.time, c.capacity - COUNT(b.id) as free_slots, c.class_type
        FROM classes c
        LEFT JOIN bookings b ON c.date=b.date AND c.time=b.time
        WHERE c.date=?
        GROUP BY c.id
        HAVING free_slots > 0
        ORDER BY c.time
    """, (selected_date,))
    rows = cursor.fetchall()
    if not rows:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", callback_data="no_times")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_class")]
        ])
        return kb
    buttons = [
        InlineKeyboardButton(
            text=f"{r[0]} ‚Ä¢ {r[2]} ({r[1]} –º–µ—Å—Ç)",
            callback_data=f"time:{selected_date}:{r[0]}"
        )
        for r in rows
    ]
    inline_keyboard = [buttons[i:i + 1] for i in range(0, len(buttons), 1)]
    inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_class")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


@dp.message(Command("start"))
async def start(message: Message):
    try:
        await message.delete()
    except Exception:
        pass
    text = f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ô–æ–≥–∞-–ë–æ—Ç, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è. üßò‚Äç‚ôÄÔ∏è
–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    await send_or_edit_single(message.from_user.id, message.chat.id, text, main_menu())


@dp.message(Command("admin"))
async def admin_panel_cmd(message: Message):
    try:
        await message.delete()
    except Exception:
        pass
    if message.from_user.id not in ADMIN_ID:
        await send_or_edit_single(message.from_user.id, message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", None)
        return
    await send_or_edit_single(message.from_user.id, message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", admin_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è about_classes –∏ announcement
@dp.callback_query(lambda c: c.data == "about_classes")
async def about_classes(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await delete_previous_user_message(callback.from_user.id)

    text, photo_path = get_about_classes_data()

    if photo_path and os.path.exists(photo_path):
        try:
            photo = FSInputFile(photo_path)
            msg = await callback.message.answer_photo(photo, caption=text, reply_markup=main_menu())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_message[callback.from_user.id] = (msg.chat.id, msg.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await handle_text_response(callback, text)
    else:
        await handle_text_response(callback, text)


@dp.callback_query(lambda c: c.data == "announcement")
async def announcement(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await delete_previous_user_message(callback.from_user.id)

    text, photo_path = get_announcement_data()

    if photo_path and os.path.exists(photo_path):
        try:
            photo = FSInputFile(photo_path)
            msg = await callback.message.answer_photo(photo, caption=text, reply_markup=main_menu())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_message[callback.from_user.id] = (msg.chat.id, msg.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await handle_text_response(callback, text)
    else:
        await handle_text_response(callback, text)


@dp.callback_query()
async def handle_menu(callback: CallbackQuery):
    data = callback.data or ""
    user_id = callback.from_user.id
    await callback.answer()

    if data == "book_class":
        kb = available_classes_keyboard()
        try:
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", reply_markup=kb)
            last_message[user_id] = (callback.message.chat.id, callback.message.message_id)
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", kb)
        return

    if data.startswith("date:"):
        selected_date_db = data.split(":", 1)[1]
        selected_date_display = format_date_display(selected_date_db)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        kb = available_times_keyboard(selected_date_db)
        try:
            await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date_display}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=kb)
            last_message[user_id] = (callback.message.chat.id, callback.message.message_id)
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id,
                                      f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date_display}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", kb)
        return

    if data.startswith("time:"):
        parts = data.split(":", 2)
        if len(parts) < 3:
            try:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                                 reply_markup=main_menu())
                last_message[user_id] = (callback.message.chat.id, callback.message.message_id)
            except Exception:
                await send_or_edit_single(user_id, callback.message.chat.id,
                                          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", main_menu())
            return

        _, selected_date_db, selected_time = parts
        selected_date_display = format_date_display(selected_date_db)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        cursor.execute("SELECT id FROM bookings WHERE user_id=? AND date=? AND time=?",
                       (user_id, selected_date_db, selected_time))
        if cursor.fetchone():
            try:
                await callback.message.edit_text("‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!", reply_markup=main_menu())
                last_message[user_id] = (callback.message.chat.id, callback.message.message_id)
            except Exception:
                await send_or_edit_single(user_id, callback.message.chat.id, "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!",
                                          main_menu())
            return

        cursor.execute("SELECT capacity, class_type FROM classes WHERE date=? AND time=?",
                       (selected_date_db, selected_time))
        result = cursor.fetchone()
        if not result:
            try:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.",
                                                 reply_markup=main_menu())
                last_message[user_id] = (callback.message.chat.id, callback.message.message_id)
            except Exception:
                await send_or_edit_single(user_id, callback.message.chat.id,
                                          "‚ùå –û—à–∏–±–∫–∞: –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.", main_menu())
            return

        capacity, class_type = result
        cursor.execute("SELECT COUNT(*) FROM bookings WHERE date=? AND time=?", (selected_date_db, selected_time))
        count = cursor.fetchone()[0]

        if count >= capacity:
            try:
                await callback.message.edit_text("‚ùå –ù–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ—Å—Ç!", reply_markup=main_menu())
            except Exception:
                await send_or_edit_single(user_id, callback.message.chat.id, "‚ùå –ù–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ—Å—Ç!",
                                          main_menu())
            return

        cursor.execute(
            "INSERT INTO bookings (user_id, username, date, time) VALUES (?, ?, ?, ?)",
            (user_id, callback.from_user.username, selected_date_db, selected_time)
        )
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        admin_message = (
            f"‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–Ω–µ—Ç username'} (ID: {user_id})\n"
            f"üìÖ –î–∞—Ç–∞: {selected_date_display}\n"
            f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
            f"üßò –¢–∏–ø: {class_type}"
        )
        await notify_admin(admin_message)

        try:
            await callback.message.edit_text(
                f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ {selected_date_display} –≤ {selected_time} ({class_type})!",
                reply_markup=main_menu())
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id,
                                      f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ {selected_date_display} –≤ {selected_time} ({class_type})!",
                                      main_menu())
        return

    if data == "cancel_booking":
        kb = cancel_keyboard(user_id)
        try:
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=kb)
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", kb)
        return

    if data.startswith("cancel:"):
        booking_id = int(data.split(":", 1)[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("SELECT user_id, username, date, time FROM bookings WHERE id=?", (booking_id,))
        booking_info = cursor.fetchone()

        if booking_info:
            user_id, username, date, time = booking_info
            display_date = format_date_display(date)

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–± –æ—Ç–º–µ–Ω–µ
            admin_message = (
                f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–Ω–µ—Ç username'} (ID: {user_id})\n"
                f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time}"
            )
            await notify_admin(admin_message)

        try:
            await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", main_menu())
        return

    if data == "my_bookings":
        cursor.execute("""
            SELECT b.date, b.time, c.class_type
            FROM bookings b
            LEFT JOIN classes c ON b.date=c.date AND b.time=c.time
            WHERE b.user_id=?
            ORDER BY b.date, b.time
        """, (user_id,))
        rows = cursor.fetchall()
        if not rows:
            try:
                await callback.message.edit_text("üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.", reply_markup=main_menu())
            except Exception:
                await send_or_edit_single(user_id, callback.message.chat.id, "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.",
                                          main_menu())
        else:
            text = "üìñ <b>–í–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
            for r in rows:
                display_date = format_date_display(r[0])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                text += f"üìÖ {display_date} ‚è∞ {r[1]} ‚Ä¢ {r[2] if r[2] else '–ó–∞–Ω—è—Ç–∏–µ'}\n"
            try:
                await callback.message.edit_text(text, reply_markup=main_menu())
            except Exception:
                await send_or_edit_single(user_id, callback.message.chat.id, text, main_menu())
        return

    if data == "support":
        try:
            await callback.message.edit_text("üí¨ –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @danakushu.", reply_markup=main_menu())
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id, "üí¨ –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @danakushu.",
                                      main_menu())
        return

    if data == "go_user_menu":
        try:
            await callback.message.edit_text(f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:",
                                             reply_markup=main_menu())
        except Exception:
            await send_or_edit_single(user_id, callback.message.chat.id,
                                      f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", main_menu())
        return


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
