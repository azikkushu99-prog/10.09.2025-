from aiogram import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sqlite3
import os
import logging
from datetime import datetime

conn = sqlite3.connect("Bookings.db")
cursor = conn.cursor()


class AdminAddClass(StatesGroup):
    month = State()
    day = State()
    time = State()
    capacity = State()
    class_type = State()


class AdminRemoveClass(StatesGroup):
    select_class = State()
    confirm_notification = State()
    notification_text = State()


class EditContent(StatesGroup):
    select_type = State()
    edit_text = State()
    add_photo = State()


def admin_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_add_class"),
            InlineKeyboardButton(text="‚ûñ –£–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_remove_class")
        ],
        [
            InlineKeyboardButton(text="üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è", callback_data="admin_view_classes"),
            InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π", callback_data="admin_view_bookings")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_edit_content"),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go_user_menu")
        ]
    ])
    return keyboard


def get_about_classes_data():
    cursor.execute("SELECT value, photo_path FROM content WHERE key = 'about_classes'")
    result = cursor.fetchone()
    if result:
        text, photo_filename = result
        if photo_filename:
            photo_path = os.path.join("Photo1", photo_filename)
            if os.path.exists(photo_path):
                return text, photo_path
            else:
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        return text, None
    return "üßò –£ –Ω–∞—Å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ä–∞—Å—Ç—è–∂–∫–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è.", None


def get_announcement_data():
    cursor.execute("SELECT value, photo_path FROM content WHERE key = 'announcement'")
    result = cursor.fetchone()
    if result:
        text, photo_filename = result
        if photo_filename:
            photo_path = os.path.join("Photo2", photo_filename)
            if os.path.exists(photo_path):
                return text, photo_path
            else:
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        return text, None
    return "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", None


def format_date_display(db_date):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ë–î (YYYY-MM-DD) –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (DD.MM.YYYY)"""
    try:
        if db_date:
            date_obj = datetime.strptime(db_date, "%Y-%m-%d")
            return date_obj.strftime("%d.%m.%Y")
        return db_date
    except ValueError:
        return db_date


def format_date_storage(display_date):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (DD.MM.YYYY) –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î (YYYY-MM-DD)"""
    try:
        if display_date:
            date_obj = datetime.strptime(display_date, "%d.%m.%Y")
            return date_obj.strftime("%Y-%m-%d")
        return display_date
    except ValueError:
        return display_date


async def delete_previous_messages(message: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])

    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)


def setup_admin_handlers(dp: Dispatcher, admin_ids: tuple):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""

    @dp.callback_query(lambda c: c.data == "admin_add_class")
    async def admin_add_class_start(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(messages_to_delete=[])

        months = [str(i) for i in range(1, 13)]
        buttons = [InlineKeyboardButton(text=m, callback_data=f"month:{m}") for m in months]
        inline_keyboard = [buttons[i:i + 4] for i in range(0, len(buttons), 4)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        try:
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)
        except Exception:
            msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get('messages_to_delete', [])
            messages_to_delete.append(msg.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(AdminAddClass.month)

    @dp.callback_query(AdminAddClass.month)
    async def admin_add_class_month(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        parts = (callback.data or "").split(":", 1)
        if len(parts) < 2 or not parts[1]:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=admin_menu())
            await state.clear()
            return

        selected_month = parts[1]
        await state.update_data(month=selected_month)

        days = [str(i) for i in range(1, 32)]
        buttons = [InlineKeyboardButton(text=d, callback_data=f"day:{d}") for d in days]
        inline_keyboard = [buttons[i:i + 7] for i in range(0, len(buttons), 7)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        try:
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)
        except Exception:
            msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get('messages_to_delete', [])
            messages_to_delete.append(msg.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(AdminAddClass.day)

    @dp.callback_query(AdminAddClass.day)
    async def admin_add_class_day(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        parts = (callback.data or "").split(":", 1)
        if len(parts) < 2 or not parts[1]:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=admin_menu())
            await state.clear()
            return

        selected_day = parts[1]
        await state.update_data(day=selected_day)

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥, –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        data = await state.get_data()
        month = data.get('month')
        day = selected_day
        year = datetime.now().year

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_date = f"{int(day):02d}.{int(month):02d}.{year}"
        await state.update_data(display_date=display_date)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages(callback.message, state)

        msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:30):")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(AdminAddClass.time)

    @dp.message(AdminAddClass.time)
    async def admin_add_class_time(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in admin_ids:
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_previous_messages(message, state)
        try:
            await message.delete()
        except Exception:
            pass

        try:
            datetime.strptime(message.text, "%H:%M")
        except Exception:
            msg = await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 19:30). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get('messages_to_delete', [])
            messages_to_delete.append(msg.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)
            return

        await state.update_data(time=message.text)

        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(AdminAddClass.capacity)

    @dp.message(AdminAddClass.capacity)
    async def admin_add_class_capacity(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in admin_ids:
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_previous_messages(message, state)
        try:
            await message.delete()
        except Exception:
            pass

        try:
            capacity = int(message.text)
        except ValueError:
            msg = await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get('messages_to_delete', [])
            messages_to_delete.append(msg.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)
            return

        await state.update_data(capacity=capacity)

        msg = await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ô–æ–≥–∞-–Ω–∏–¥—Ä–∞, –†–∞—Å—Ç—è–∂–∫–∞, –ú–µ–¥–∏—Ç–∞—Ü–∏—è):")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(AdminAddClass.class_type)

    @dp.message(AdminAddClass.class_type)
    async def admin_add_class_type(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in admin_ids:
            return

        class_type = message.text
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_previous_messages(message, state)
        try:
            await message.delete()
        except Exception:
            pass

        data = await state.get_data()
        if not all(k in data for k in ("month", "day", "time", "capacity", "display_date")):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ–ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=admin_menu())
            await state.clear()
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è
        display_date = data.get('display_date')
        class_date = format_date_storage(display_date)

        time_text = data['time']
        capacity = data['capacity']

        cursor.execute("INSERT INTO classes (date, time, capacity, class_type) VALUES (?, ?, ?, ?)",
                       (class_date, time_text, capacity, class_type))
        conn.commit()

        await message.answer(f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {display_date} –≤ {time_text} ({class_type}), –º–µ—Å—Ç: {capacity}",
                             reply_markup=admin_menu())
        await state.clear()

    @dp.callback_query(lambda c: c.data == "admin_view_classes")
    async def admin_view_classes(callback: CallbackQuery):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        cursor.execute("SELECT date, time, class_type, capacity FROM classes ORDER BY date, time")
        rows = cursor.fetchall()

        if not rows:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.", reply_markup=admin_menu())
            return

        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π:</b>\n\n"
        for r in rows:
            display_date = format_date_display(r[0])
            text += f"üìÖ {display_date} ‚è∞ {r[1]} ‚Ä¢ {r[2]} (–º–µ—Å—Ç: {r[3]})\n"

        await callback.message.edit_text(text, reply_markup=admin_menu())

    @dp.callback_query(lambda c: c.data == "admin_view_bookings")
    async def admin_view_bookings(callback: CallbackQuery):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π
        cursor.execute("""
            SELECT c.id, c.date, c.time, c.class_type, c.capacity, 
                   COUNT(b.id) as booked_count
            FROM classes c
            LEFT JOIN bookings b ON c.date = b.date AND c.time = b.time
            GROUP BY c.id
            ORDER BY c.date, c.time
        """)
        rows = cursor.fetchall()

        if not rows:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.", reply_markup=admin_menu())
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        keyboard_buttons = []
        for r in rows:
            class_id, date, time, class_type, capacity, booked_count = r
            display_date = format_date_display(date)
            button_text = f"{display_date} {time} ‚Ä¢ {class_type} ‚Ä¢ {booked_count}/{capacity}"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"view_booking_details:{class_id}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith("view_booking_details:"))
    async def admin_view_booking_details(callback: CallbackQuery):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è –∏–∑ callback_data
        class_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        cursor.execute("SELECT date, time, class_type, capacity FROM classes WHERE id=?", (class_id,))
        class_info = cursor.fetchone()

        if not class_info:
            await callback.message.edit_text("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_menu())
            return

        date, time, class_type, capacity = class_info
        display_date = format_date_display(date)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            SELECT username, user_id 
            FROM bookings 
            WHERE date=? AND time=? 
            ORDER BY id
        """, (date, time))
        bookings = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏:</b>\n\n"
        text += f"üìÖ –î–∞—Ç–∞: {display_date}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {time}\n"
        text += f"üßò –¢–∏–ø: {class_type}\n"
        text += f"üë• –ó–∞–ø–∏—Å–∞–Ω–æ: {len(bookings)}/{capacity}\n\n"

        if bookings:
            text += "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è:</b>\n\n"
            for i, (username, user_id) in enumerate(bookings, 1):
                username_display = f"@{username}" if username else f"ID: {user_id}"
                text += f"{i}. {username_display}\n"
        else:
            text += "‚ùå –ù–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è."

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_view_bookings")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="admin_back")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data == "admin_remove_class")
    async def admin_remove_class(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(messages_to_delete=[])

        cursor.execute("SELECT id, date, time, class_type FROM classes ORDER by date, time")
        rows = cursor.fetchall()

        if not rows:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=admin_menu())
            return

        keyboard_buttons = []
        for r in rows:
            class_id, date, time, class_type = r
            display_date = format_date_display(date)
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{display_date} {time} ‚Ä¢ {class_type}",
                callback_data=f"remove_class:{class_id}"
            )])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(AdminRemoveClass.select_class)

    @dp.callback_query(AdminRemoveClass.select_class)
    async def admin_remove_class_select(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return

        parts = (callback.data or "").split(":", 1)
        if len(parts) < 2:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu())
            await state.clear()
            return

        class_id = int(parts[1])
        cursor.execute("SELECT date, time, class_type FROM classes WHERE id=?", (class_id,))
        class_info = cursor.fetchone()

        if not class_info:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_menu())
            await state.clear()
            return

        class_date, class_time, class_type = class_info
        display_date = format_date_display(class_date)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await state.update_data(
            class_date=class_date,
            class_time=class_time,
            class_type=class_type,
            display_date=display_date
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ
        cursor.execute("SELECT user_id FROM bookings WHERE date=? AND time=?", (class_date, class_time))
        bookings = cursor.fetchall()
        user_ids = [booking[0] for booking in bookings]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await state.update_data(user_ids=user_ids)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="send_notification:yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å", callback_data="send_notification:no")]
        ])

        await callback.message.edit_text(
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–Ω—è—Ç–∏—è {display_date} –≤ {class_time} ({class_type})?",
            reply_markup=keyboard
        )
        await state.set_state(AdminRemoveClass.confirm_notification)

    @dp.callback_query(AdminRemoveClass.confirm_notification)
    async def admin_confirm_notification(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return

        parts = (callback.data or "").split(":", 1)
        if len(parts) < 2:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu())
            await state.clear()
            return

        action = parts[1]
        data = await state.get_data()
        class_date = data.get('class_date')
        class_time = data.get('class_time')
        class_type = data.get('class_type')
        display_date = data.get('display_date')
        user_ids = data.get('user_ids', [])

        # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –∏ –∑–∞–ø–∏—Å–∏
        cursor.execute("DELETE FROM bookings WHERE date=? AND time=?", (class_date, class_time))
        cursor.execute("DELETE FROM classes WHERE date=? AND time=?", (class_date, class_time))
        conn.commit()

        if action == "yes":
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await delete_previous_messages(callback.message, state)

            msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–Ω—è—Ç–∏—è:")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get('messages_to_delete', [])
            messages_to_delete.append(msg.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)

            await state.set_state(AdminRemoveClass.notification_text)
        else:
            # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ {display_date} {class_time} ({class_type}) —É–¥–∞–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –∑–∞–ø–∏—Å—è–º–∏.",
                reply_markup=admin_menu()
            )
            await state.clear()

    @dp.message(AdminRemoveClass.notification_text)
    async def admin_send_notification(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in admin_ids:
            await state.clear()
            return

        notification_text = message.text
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_previous_messages(message, state)
        try:
            await message.delete()
        except Exception:
            pass

        data = await state.get_data()
        class_date = data.get('class_date')
        class_time = data.get('class_time')
        class_type = data.get('class_type')
        display_date = data.get('display_date')
        user_ids = data.get('user_ids', [])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        fail_count = 0

        for user_id in user_ids:
            try:
                await message.bot.send_message(
                    user_id,
                    f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
                    f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {class_time}\n"
                    f"üßò –¢–∏–ø: {class_type}\n\n"
                    f"{notification_text}"
                )
                success_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                fail_count += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
        report_text = (
            f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ {display_date} {class_time} ({class_type}) —É–¥–∞–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –∑–∞–ø–∏—Å–∏.\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}"
        )

        await message.answer(report_text, reply_markup=admin_menu())
        await state.clear()

    @dp.callback_query(lambda c: c.data == "admin_edit_content")
    async def admin_edit_content(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(messages_to_delete=[])

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö", callback_data="edit_about")],
            [InlineKeyboardButton(text="üì¢ –ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="edit_announcement")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])

        await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=keyboard)
        await state.set_state(EditContent.select_type)

    @dp.callback_query(EditContent.select_type)
    async def admin_edit_content_select(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return

        content_type = callback.data
        if content_type == "admin_back":
            await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        if content_type == "edit_about":
            key = "about_classes"
            current_text, current_photo = get_about_classes_data()
            prompt = "–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö:\n\n" + current_text + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        elif content_type == "edit_announcement":
            key = "announcement"
            current_text, current_photo = get_announcement_data()
            prompt = "–¢–µ–∫—É—â–∏–π –∞–Ω–æ–Ω—Å:\n\n" + current_text + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        else:
            await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.", reply_markup=admin_menu())
            await state.clear()
            return

        await state.update_data(content_key=key, current_text=current_text, current_photo=current_photo)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages(callback.message, state)

        msg = await callback.message.answer(prompt)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(EditContent.edit_text)

    @dp.message(EditContent.edit_text)
    async def admin_edit_content_save(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in admin_ids:
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_previous_messages(message, state)
        try:
            await message.delete()
        except Exception:
            pass

        data = await state.get_data()
        content_key = data.get('content_key')
        new_text = message.text

        if not content_key or not new_text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu())
            await state.clear()
            return

        await state.update_data(new_text=new_text)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="add_photo_no")]
        ])

        msg = await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É?", reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

        await state.set_state(EditContent.add_photo)

    @dp.callback_query(EditContent.add_photo)
    async def admin_edit_content_photo_choice(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            await state.clear()
            return

        data = await state.get_data()
        content_key = data.get('content_key')
        new_text = data.get('new_text')

        if callback.data == "add_photo_no":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (—É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –±—ã–ª–æ)
            cursor.execute("UPDATE content SET value = ?, photo_path = NULL WHERE key = ?", (new_text, content_key))
            conn.commit()

            if content_key == "about_classes":
                success_message = "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–±–µ–∑ —Ñ–æ—Ç–æ)!"
            else:
                success_message = "‚úÖ –ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–±–µ–∑ —Ñ–æ—Ç–æ)!"

            await callback.message.edit_text(success_message, reply_markup=admin_menu())
            await state.clear()
            return

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        if content_key == "about_classes":
            folder = "Photo1"
        else:
            folder = "Photo2"

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages(callback.message, state)

        msg = await callback.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –û–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É {folder}/")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        messages_to_delete = data.get('messages_to_delete', [])
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

        await state.update_data(photo_folder=folder)

    @dp.message(EditContent.add_photo)
    async def admin_edit_content_photo_save(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in admin_ids:
            await state.clear()
            return

        if not message.photo:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await delete_previous_messages(message, state)

            msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            data = await state.get_data()
            messages_to_delete = data.get('messages_to_delete', [])
            messages_to_delete.append(msg.message_id)
            await state.update_data(messages_to_delete=messages_to_delete)
            return

        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            await delete_previous_messages(message, state)
            try:
                await message.delete()
            except Exception:
                pass

            data = await state.get_data()
            content_key = data.get('content_key')
            new_text = data.get('new_text')
            folder = data.get('photo_folder')

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            if os.path.exists(folder):
                for filename in os.listdir(folder):
                    file_path = os.path.join(folder, filename)
                    try:
                        if os.path.isfile(file_path):
                            os.unlink(file_path)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            photo = message.photo[-1]
            file_id = photo.file_id
            file = await message.bot.get_file(file_id)
            file_path = file.file_path

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            photo_filename = f"{content_key}_{timestamp}.jpg"
            photo_path = os.path.join(folder, photo_filename)

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            await message.bot.download_file(file_path, photo_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
            cursor.execute("UPDATE content SET value = ?, photo_path = ? WHERE key = ?",
                           (new_text, photo_filename, content_key))
            conn.commit()

            if content_key == "about_classes":
                success_message = "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å —Ñ–æ—Ç–æ!"
            else:
                success_message = "‚úÖ –ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ!"

            await message.answer(success_message, reply_markup=admin_menu())
            await state.clear()

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}", reply_markup=admin_menu())
            await state.clear()

    @dp.callback_query(lambda c: c.data == "admin_back")
    async def admin_back(callback: CallbackQuery, state: FSMContext):
        await callback.answer()
        if callback.from_user.id not in admin_ids:
            return

        await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        await state.clear()
